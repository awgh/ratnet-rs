name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features

    - name: Build examples
      run: cargo build --examples --all-features

    - name: Build with minimal features
      run: cargo build --no-default-features --features p2p

  test-sqlite:
    name: Test with SQLite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true

    - name: Install SQLite
      run: sudo apt-get update && sudo apt-get install -y sqlite3 libsqlite3-dev

    - name: Run database tests
      run: cargo test --test database_tests --features sqlite

    - name: Build database example
      run: cargo build --example database_node --features sqlite

  test-tls:
    name: Test with TLS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true

    - name: Run TLS tests
      run: cargo test --test transport_tests --features tls

    - name: Build TLS example
      run: cargo build --example tls_transport --features tls

  test-https:
    name: Test with HTTPS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true

    - name: Run HTTPS tests
      run: cargo test --test transport_tests --features https

    - name: Build HTTPS example
      run: cargo build --example https_transport --features https

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true

    - name: Build release binary
      run: cargo build --release

    - name: Check binary size
      run: |
        echo "Binary size:"
        ls -lh target/release/ratnet

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ratnet-linux-x86_64
        path: target/release/ratnet 